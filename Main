package main

import (
	"fmt"
)

type Node struct {
	Nombre   nombreapellido
	TID      string
	ID       int
	Sintomas string
	Hllegada string
	EPS      string
}
type nombreapellido struct {
	PNombre   string
	SNombre   string
	PApellido string
	SApellido string
}

func (n *Node) String() string {
	var nx = n.Nombre.PNombre + " " + n.Nombre.SNombre + " " + n.Nombre.PApellido + " " + n.Nombre.SApellido

	return fmt.Sprint(nx, "\n", n.TID, " ", n.ID, "\n..:Sintomas:..     ", n.Sintomas, "\n..:Hora de llegada:..     ", n.Hllegada, "\n..:Eps:..     ", n.EPS, "\n\n\n")
}

// NewQueue returns a new queue with the given initial size.
func NewQueue(size int) *Queue {
	return &Queue{
		nodes: make([]*Node, size),
		size:  size,
	}
}

// Queue is a basic FIFO queue based on a circular list that resizes as needed.
type Queue struct {
	nodes []*Node
	size  int
	head  int
	tail  int
	count int
}

// Push adds a node to the queue.

func (q *Queue) Push(n *Node) {
	if q.head == q.tail && q.count > 0 {
		nodes := make([]*Node, len(q.nodes)+q.size)
		copy(nodes, q.nodes[q.head:])
		copy(nodes[len(q.nodes)-q.head:], q.nodes[:q.head])
		q.head = 0
		q.tail = len(q.nodes)
		q.nodes = nodes
	}
	q.nodes[q.tail] = n
	q.tail = (q.tail + 1) % len(q.nodes)
	q.count++
}

// Pop removes and returns a node from the queue in first to last order.
func (q *Queue) Pop() *Node {
	if q.count == 0 {
		return nil
	}
	node := q.nodes[q.head]
	q.head = (q.head + 1) % len(q.nodes)
	q.count--
	return node
}
func main() {

	//var datos Node = Node{Nombre: nombreapellido{"E","J","R","F"},TID:"CC",ID:123,Sintomas:"Dolor",Hllegada: "12:35",EPS:"Famisanar"}
	//fmt.Println("Cola")
	q := NewQueue(1)
	q.Push(&Node{Nombre: nombreapellido{"E", "J", "R", "F"}, TID: "CC", ID: 123, Sintomas: "Dolor", Hllegada: "12:35", EPS: "Famisanar"})
	q.Push(&Node{Nombre: nombreapellido{"E", "J", "R", "F"}, TID: "CC", ID: 123, Sintomas: "Dolor", Hllegada: "12:35", EPS: "Famisanar"})
	q.Push(&Node{Nombre: nombreapellido{"E", "J", "R", "F"}, TID: "CC", ID: 123, Sintomas: "Dolor", Hllegada: "12:35", EPS: "Famisanar"})
	fmt.Println(q.Pop(), q.Pop(), q.Pop())
	//fmt.Println("Informaci√≥n del usuario: ", datos)
}
